// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  email             String         @unique
  name              String?
  password          String
  role              UserRole       @default(USER)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  subscriptions     Subscription[]
  organizationId    String?
  organization      Organization?  @relation(fields: [organizationId], references: [id])
  department        String?
  position          String?
  employeeId        String?
  contactNumber     String?
  status            UserStatus     @default(ACTIVE)
  permissions       String[]       @default([])
  supervisor        String?
  hireDate          DateTime?
  createdBy         String?
  isOrganizationAdmin Boolean      @default(false)
  posts             Post[]
  streams           Stream[]
  sentMessages      Message[]      @relation("SentMessages")
  receivedMessages  Message[]      @relation("ReceivedMessages")
  image             String?
}

model Organization {
  id                String         @id @default(uuid())
  name              String
  type              OrganizationType
  licenseNumber     String?
  address           String?
  contactEmail      String?
  contactPhone      String?
  website           String?
  description       String?
  status            OrgStatus      @default(ACTIVE)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  parentId          String?
  parent            Organization?  @relation("OrganizationHierarchy", fields: [parentId], references: [id])
  children          Organization[] @relation("OrganizationHierarchy")
  users             User[]
}

model Subscription {
  id                String             @id @default(uuid())
  userId            String
  user              User               @relation(fields: [userId], references: [id])
  planId            String
  plan              SubscriptionPlan   @relation(fields: [planId], references: [id])
  status            SubscriptionStatus @default(ACTIVE)
  startDate         DateTime           @default(now())
  endDate           DateTime?
  autoRenew         Boolean            @default(true)
  paymentMethod     String?
  lastPaymentDate   DateTime?
  nextPaymentDate   DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  paymentHistory    Payment[]
}

model SubscriptionPlan {
  id                String         @id @default(uuid())
  name              String
  description       String?
  price             Float
  currency          String         @default("USD")
  interval          PlanInterval
  intervalCount     Int            @default(1)
  features          String[]
  isActive          Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  subscriptions     Subscription[]
}

model Payment {
  id                String         @id @default(uuid())
  subscriptionId    String
  subscription      Subscription   @relation(fields: [subscriptionId], references: [id])
  amount            Float
  currency          String         @default("USD")
  status            PaymentStatus  @default(PENDING)
  paymentMethod     String?
  transactionId     String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

enum UserRole {
  USER
  INVESTOR
  ADMIN
  BROKER
  TRADER
  HR
  ACCOUNTING
  KELSOKO_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum OrganizationType {
  KELSOKO
  BANK
  BROKER
  FUND
  SPECULATOR
  OTHER
}

enum OrgStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
  PENDING
  FAILED
}

enum PlanInterval {
  MONTHLY
  QUARTERLY
  YEARLY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Post {
  id                String         @id @default(uuid())
  userId            String
  user              User           @relation(fields: [userId], references: [id])
  content           String
  visibility        PostVisibility @default(PUBLIC)
  tradeSymbol       String?
  tradeType         TradeType?
  tradePrice        Float?
  analysisType      AnalysisType?
  analysisSummary   String?
  hashtags          String[]       @default([])
  mentions          String[]       @default([])
  attachments       Attachment[]
  likes             Int            @default(0)
  shares            Int            @default(0)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  comments          Comment[]
}

model Comment {
  id                String         @id @default(uuid())
  postId            String
  post              Post           @relation(fields: [postId], references: [id])
  userId            String
  content           String
  parentId          String?
  parent            Comment?       @relation("CommentReplies", fields: [parentId], references: [id])
  replies           Comment[]      @relation("CommentReplies")
  likes             Int            @default(0)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model Attachment {
  id                String         @id @default(uuid())
  postId            String
  post              Post           @relation(fields: [postId], references: [id])
  type              AttachmentType
  url               String
  name              String
  size              Int
  createdAt         DateTime       @default(now())
}

enum PostVisibility {
  PUBLIC
  FOLLOWERS
  PRIVATE
}

enum TradeType {
  BUY
  SELL
}

enum AnalysisType {
  TECHNICAL
  FUNDAMENTAL
}

model Message {
  id                String         @id @default(uuid())
  senderId          String
  sender            User           @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId        String
  receiver          User           @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  content           String
  read              Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
}

enum AttachmentType {
  IMAGE
  DOCUMENT
  VIDEO
}

model Trade {
  id                String         @id @default(uuid())
  userId            String
  symbol            String
  quantity          Int
  price             Float
  type              TradeType
  status            TradeStatus    @default(COMPLETED)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

enum TradeStatus {
  PENDING
  COMPLETED
  CANCELLED
  FAILED
}

model Stream {
  id                String         @id @default(uuid())
  userId            String
  user              User           @relation(fields: [userId], references: [id])
  title             String
  viewers           Int            @default(0)
  isLive            Boolean        @default(true)
  startTime         DateTime       @default(now())
  endTime           DateTime?
  mediaType         StreamMediaType
  mediaUrl          String?
  duration          Int?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

enum StreamMediaType {
  VIDEO
  AUDIO
}
