'use client';

import { useEffect, useState } from 'react';
import { useStore } from '@/lib/store';
import { UserPortfolio, PortfolioPerformance } from '@/lib/types';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { ArrowUpRight, ArrowDownRight, PieChart, BarChart, TrendingUp } from 'lucide-react';
import { Progress } from '@/components/ui/progress';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip as RechartsTooltip,
  ResponsiveContainer,
  PieChart as RechartsPieChart,
  Pie,
  Cell,
  Legend
} from 'recharts';

export function Portfolio() {
  const { user, stocks } = useStore();
  const [isLoading, setIsLoading] = useState(false);
  const [portfolio, setPortfolio] = useState<UserPortfolio>({});
  const [performance, setPerformance] = useState<PortfolioPerformance | null>(null);
  const [activeTab, setActiveTab] = useState('overview');
  const [historicalData, setHistoricalData] = useState<any[]>([]);
  const [timeframe, setTimeframe] = useState('1M'); // 1D, 1W, 1M, 3M, 1Y, ALL
  
  // Fetch portfolio data when component mounts or user changes
  useEffect(() => {
    async function fetchPortfolio() {
      if (!user) return;
      
      setIsLoading(true);
      try {
        // Fetch comprehensive portfolio data from the users API endpoint
        const response = await fetch(`/api/users/portfolio?userId=${user.id}`);
        
        if (!response.ok) {
          throw new Error(`Failed to fetch portfolio: ${response.status}`);
        }
        
        const data = await response.json();
        setPortfolio(data.portfolio);
        setPerformance(data.performance);
        
        // Generate mock historical data based on current performance
        // In a real app, this would be fetched from an API
        generateHistoricalData(data.performance?.totalValue || 0);
      } catch (error) {
        console.error('Error fetching portfolio:', error);
        // Fallback to trading API if users API fails
        try {
          const fallbackResponse = await fetch(`/api/trading/portfolio?userId=${user.id}`);
          if (fallbackResponse.ok) {
            const fallbackData = await fallbackResponse.json();
            setPortfolio(fallbackData.portfolio);
          }
        } catch (fallbackError) {
          console.error('Fallback fetch also failed:', fallbackError);
        }
      } finally {
        setIsLoading(false);
      }
    }
    
    fetchPortfolio();
  }, [user, timeframe]);
  
  // Refetch when timeframe changes
  useEffect(() => {
    if (performance?.totalValue) {
      generateHistoricalData(performance.totalValue);
    }
  }, [timeframe, performance?.totalValue]);
  
  function generateHistoricalData(currentValue: number) {
    const now = new Date();
    const data = [];
    
    // Generate data points based on the selected timeframe
    let points = 30; // Default for 1M
    let interval = 24 * 60 * 60 * 1000; // 1 day in milliseconds
    
    if (timeframe === '1D') {
      points = 24;
      interval = 60 * 60 * 1000; // 1 hour
    } else if (timeframe === '1W') {
      points = 7;
      interval = 24 * 60 * 60 * 1000; // 1 day
    } else if (timeframe === '3M') {
      points = 90;
      interval = 24 * 60 * 60 * 1000; // 1 day
    } else if (timeframe === '1Y') {
      points = 12;
      interval = 30 * 24 * 60 * 60 * 1000; // 1 month
    }
    
    // Start with the current value and work backwards with random variations
    let value = currentValue;
    for (let i = points - 1; i >= 0; i--) {
      const date = new Date(now.getTime() - (i * interval));
      // Random variation between -2% and +2%
      const change = (Math.random() * 4 - 2) / 100;
      // For earlier points, reduce the value slightly to show growth trend
      const trendFactor = 1 - (i / points) * 0.1;
      value = value * (1 - change) * trendFactor;
      
      data.push({
        date: date.toISOString().split('T')[0],
        value: Math.round(value)
      });
    }
    
    // Add the current value as the last point
    data.push({
      date: now.toISOString().split('T')[0],
      value: currentValue
    });
    
    setHistoricalData(data);
  }

  if (!user) return null;

  const getStockCurrentPrice = (symbol: string) => {
    return stocks.find((s) => s.symbol === symbol)?.price || 0;
  };

  const calculatePositionValue = (symbol: string, quantity: number) => {
    const currentPrice = getStockCurrentPrice(symbol);
    return currentPrice * quantity;
  };

  const calculateProfitLoss = (symbol: string) => {
    const position = portfolio[symbol];
    if (!position) return 0;
    const currentValue = calculatePositionValue(symbol, position.quantity);
    const costBasis = position.averagePrice * position.quantity;
    return currentValue - costBasis;
  };
  
  // Calculate total portfolio value and gain/loss
  const totalPortfolioValue = performance?.totalValue || 
    Object.entries(portfolio).reduce((sum, [symbol, position]) => {
      return sum + calculatePositionValue(symbol, position.quantity);
    }, 0);
    
  const totalGainLoss = performance?.totalGainLoss ||
    Object.entries(portfolio).reduce((sum, [symbol, position]) => {
      return sum + calculateProfitLoss(symbol);
    }, 0);
  
  // Calculate portfolio allocation for pie chart
  const portfolioAllocation = Object.entries(portfolio).map(([symbol, position]) => {
    const value = calculatePositionValue(symbol, position.quantity);
    return {
      name: symbol,
      value: (value / totalPortfolioValue) * 100
    };
  });
  
  // Colors for the pie chart
  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82ca9d', '#ffc658'];
  
  // Format currency
  const formatCurrency = (value: number) => {
    return `TZS ${value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
  };

  return (
    <div className="space-y-4 md:space-y-6">
      {/* Portfolio Summary Card */}
      <Card>
        <CardHeader className="p-3 md:p-6">
          <div className="flex justify-between items-center">
            <div>
              <CardTitle className="text-lg md:text-xl">Portfolio Summary</CardTitle>
              <CardDescription className="text-xs md:text-sm">Your investment overview</CardDescription>
            </div>
            <div className="text-right">
              <div className="text-xl md:text-2xl font-bold">{formatCurrency(totalPortfolioValue)}</div>
              <div className={`flex items-center text-sm md:text-base ${totalGainLoss >= 0 ? 'investor-success' : 'investor-danger'}`}>
                {totalGainLoss >= 0 ? (
                  <ArrowUpRight className="h-3 w-3 md:h-4 md:w-4 mr-1" />
                ) : (
                  <ArrowDownRight className="h-3 w-3 md:h-4 md:w-4 mr-1" />
                )}
                <span>
                  {totalGainLoss >= 0 ? '+' : ''}{formatCurrency(totalGainLoss)}
                  {' '}({((totalGainLoss / (totalPortfolioValue - totalGainLoss)) * 100).toFixed(2)}%)
                </span>
              </div>
            </div>
          </div>
        </CardHeader>
        <CardContent className="p-3 md:p-6">
          {isLoading ? (
            <div className="space-y-3 md:space-y-4">
              <Skeleton className="h-[150px] md:h-[200px] w-full" />
              <div className="space-y-2">
                <Skeleton className="h-4 w-[250px]" />
                <Skeleton className="h-4 w-[200px]" />
              </div>
            </div>
          ) : (
            <Tabs defaultValue="overview" value={activeTab} onValueChange={setActiveTab}>
              <div className="overflow-x-auto pb-2">
                <TabsList className="inline-flex w-full md:grid md:grid-cols-3 mb-3 md:mb-4">
                  <TabsTrigger className="h-9 md:h-10 text-sm md:text-base" value="overview">Overview</TabsTrigger>
                  <TabsTrigger className="h-9 md:h-10 text-sm md:text-base" value="performance">Performance</TabsTrigger>
                  <TabsTrigger className="h-9 md:h-10 text-sm md:text-base" value="allocation">Allocation</TabsTrigger>
                </TabsList>
              </div>
              
              {/* Overview Tab */}
              <TabsContent value="overview" className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {/* Performance Chart */}
                  <div className="h-[300px] border rounded-lg p-4">
                    <h3 className="text-sm font-medium mb-2">Portfolio Value</h3>
                    <div className="flex space-x-2 mb-4 overflow-x-auto">
                      {['1D', '1W', '1M', '3M', '1Y'].map((tf) => (
                        <Button
                          key={tf}
                          variant={timeframe === tf ? "default" : "outline"}
                          size="sm"
                          className="h-7 text-xs"
                          onClick={() => setTimeframe(tf)}
                        >
                          {tf}
                        </Button>
                      ))}
                    </div>
                    <ResponsiveContainer width="100%" height="80%">
                      <LineChart data={historicalData}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis 
                          dataKey="date" 
                          tick={{ fontSize: 12 }}
                          tickFormatter={(value) => {
                            if (timeframe === '1D') {
                              return value.split('T')[1]?.substring(0, 5) || value;
                            }
                            const date = new Date(value);
                            return `${date.getDate()}/${date.getMonth() + 1}`;
                          }}
                        />
                        <YAxis 
                          tick={{ fontSize: 12 }}
                          tickFormatter={(value) => `${(value / 1000).toFixed(0)}K`}
                        />
                        <RechartsTooltip 
                          formatter={(value: any) => [`${formatCurrency(value)}`, 'Value']}
                          labelFormatter={(label) => {
                            if (timeframe === '1D') {
                              return label;
                            }
                            const date = new Date(label);
                            return date.toLocaleDateString();
                          }}
                        />
                        <Line 
                          type="monotone" 
                          dataKey="value" 
                          stroke="#8884d8" 
                          strokeWidth={2}
                          dot={false}
                          activeDot={{ r: 6 }}
                        />
                      </LineChart>
                    </ResponsiveContainer>
                  </div>
                  
                  {/* Portfolio Positions */}
                  <div className="border rounded-lg p-4">
                    <h3 className="text-sm font-medium mb-2">Positions</h3>
                    <div className="space-y-3 max-h-[250px] overflow-y-auto">
                      {Object.entries(portfolio).length === 0 ? (
                        <div className="text-center py-6">
                          <p className="text-sm text-muted-foreground">No positions in your portfolio yet.</p>
                          <Button size="sm" className="mt-2">Start Trading</Button>
                        </div>
                      ) : (
                        Object.entries(portfolio).map(([symbol, position]) => {
                          const currentValue = calculatePositionValue(symbol, position.quantity);
                          const profitLoss = calculateProfitLoss(symbol);
                          const percentChange = (profitLoss / (currentValue - profitLoss)) * 100;
                          
                          return (
                            <div key={symbol} className="flex justify-between items-center border-b pb-2">
                              <div>
                                <div className="font-medium">{symbol}</div>
                                <div className="text-xs text-muted-foreground">{position.quantity} shares</div>
                              </div>
                              <div className="text-right">
                                <div>{formatCurrency(currentValue)}</div>
                                <div className={`text-xs flex items-center justify-end ${profitLoss >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                                  {profitLoss >= 0 ? (
                                    <ArrowUpRight className="h-3 w-3 mr-1" />
                                  ) : (
                                    <ArrowDownRight className="h-3 w-3 mr-1" />
                                  )}
                                  <span>
                                    {profitLoss >= 0 ? '+' : ''}{formatCurrency(profitLoss)} ({percentChange.toFixed(2)}%)
                                  </span>
                                </div>
                              </div>
                            </div>
                          );
                        })
                      )}
                    </div>
                  </div>
                </div>
              </TabsContent>
              
              {/* Performance Tab */}
              <TabsContent value="performance" className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="border rounded-lg p-4">
                    <h3 className="text-sm font-medium mb-4">Performance Metrics</h3>
                    <div className="space-y-4">
                      <div>
                        <div className="flex justify-between mb-1">
                          <span className="text-sm">Total Return</span>
                          <span className={`text-sm ${totalGainLoss >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                            {totalGainLoss >= 0 ? '+' : ''}{formatCurrency(totalGainLoss)}
                          </span>
                        </div>
                        <Progress 
                          value={50 + (totalGainLoss / (totalPortfolioValue * 0.5)) * 50} 
                          className="h-2"
                        />
                      </div>
                      
                      <div>
                        <div className="flex justify-between mb-1">
                          <span className="text-sm">Daily Change</span>
                          <span className="text-sm text-green-600">+{formatCurrency(totalPortfolioValue * 0.01)}</span>
                        </div>
                        <Progress value={55} className="h-2" />
                      </div>
                      
                      <div>
                        <div className="flex justify-between mb-1">
                          <span className="text-sm">Monthly Change</span>
                          <span className="text-sm text-green-600">+{formatCurrency(totalPortfolioValue * 0.05)}</span>
                        </div>
                        <Progress value={60} className="h-2" />
                      </div>
                      
                      <div>
                        <div className="flex justify-between mb-1">
                          <span className="text-sm">Yearly Change</span>
                          <span className="text-sm text-green-600">+{formatCurrency(totalPortfolioValue * 0.12)}</span>
                        </div>
                        <Progress value={65} className="h-2" />
                      </div>
                    </div>
                  </div>
                  
                  <div className="border rounded-lg p-4">
                    <h3 className="text-sm font-medium mb-4">Top Performers</h3>
                    <div className="space-y-3">
                      {Object.entries(portfolio).length === 0 ? (
                        <div className="text-center py-6">
                          <p className="text-sm text-muted-foreground">No positions to analyze yet.</p>
                        </div>
                      ) : (
                        Object.entries(portfolio)
                          .sort((a, b) => {
                            const aProfitLoss = calculateProfitLoss(a[0]);
                            const bProfitLoss = calculateProfitLoss(b[0]);
                            const aPercentChange = aProfitLoss / (calculatePositionValue(a[0], a[1].quantity) - aProfitLoss);
                            const bPercentChange = bProfitLoss / (calculatePositionValue(b[0], b[1].quantity) - bProfitLoss);
                            return bPercentChange - aPercentChange;
                          })
                          .slice(0, 3)
                          .map(([symbol, position]) => {
                            const profitLoss = calculateProfitLoss(symbol);
                            const currentValue = calculatePositionValue(symbol, position.quantity);
                            const percentChange = (profitLoss / (currentValue - profitLoss)) * 100;
                            
                            return (
                              <div key={symbol} className="flex justify-between items-center border-b pb-2">
                                <div className="flex items-center">
                                  <TrendingUp className="h-4 w-4 mr-2 text-green-600" />
                                  <div>
                                    <div className="font-medium">{symbol}</div>
                                    <div className="text-xs text-muted-foreground">{position.quantity} shares</div>
                                  </div>
                                </div>
                                <div className="text-right">
                                  <div className={`text-sm ${profitLoss >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                                    {percentChange.toFixed(2)}%
                                  </div>
                                  <div className="text-xs text-muted-foreground">
                                    {formatCurrency(profitLoss)}
                                  </div>
                                </div>
                              </div>
                            );
                          })
                      )}
                    </div>
                  </div>
                </div>
              </TabsContent>
              
              {/* Allocation Tab */}
              <TabsContent value="allocation" className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="border rounded-lg p-4">
                    <h3 className="text-sm font-medium mb-2">Portfolio Allocation</h3>
                    {Object.entries(portfolio).length === 0 ? (
                      <div className="text-center py-6">
                        <p className="text-sm text-muted-foreground">No positions to analyze yet.</p>
                      </div>
                    ) : (
                      <div className="h-[250px]">
                        <ResponsiveContainer width="100%" height="100%">
                          <RechartsPieChart>
                            <Pie
                              data={portfolioAllocation}
                              cx="50%"
                              cy="50%"
                              labelLine={false}
                              outerRadius={80}
                              fill="#8884d8"
                              dataKey="value"
                              label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                            >
                              {portfolioAllocation.map((entry, index) => (
                                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                              ))}
                            </Pie>
                            <Legend />
                          </RechartsPieChart>
                        </ResponsiveContainer>
                      </div>
                    )}
                    <div className="mt-6">
                      <h4 className="text-sm font-medium mb-2">Recommendations</h4>
                      <ul className="text-sm space-y-2 list-disc pl-5">
                        {portfolioAllocation.length === 0 && (
                          <li>Start building your portfolio by adding some assets.</li>
                        )}
                        {portfolioAllocation.length === 1 && (
                          <li>Consider diversifying your portfolio by adding more assets to reduce risk.</li>
                        )}
                        {portfolioAllocation.length > 0 && portfolioAllocation.sort((a, b) => b.value - a.value)[0].value > 50 && (
                          <li>Your portfolio is heavily concentrated in {portfolioAllocation.sort((a, b) => b.value - a.value)[0].name}. Consider reducing this position to lower risk.</li>
                        )}
                        {portfolioAllocation.length > 0 && portfolioAllocation.length < 5 && (
                          <li>Adding more assets from different sectors could improve diversification.</li>
                        )}
                      </ul>
                    </div>
                  </div>
                </div>
              </TabsContent>
            </Tabs>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
